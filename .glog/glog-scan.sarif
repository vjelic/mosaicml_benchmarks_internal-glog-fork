{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "8b66e53e-f4ad-35fc-ab3e-f78ce79c0c52",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "e051ed7c-b820-3d13-93b7-e3e99ae3dc53",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "b40d7874-bdd5-38ff-a0cb-c808be37148d",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "7b22bb69-919f-3d87-b14f-88949ed5ea78",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "66dca197-1044-3ae0-9ac5-027cafb92b72",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "39c821e6-3812-3b56-aecb-2bf70551d74e",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "3f6226db-45f8-303b-97d1-75d04a871fce",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "a26929a1-88d4-3a44-8b5e-3909790e1989",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "b7906f96-2d48-3ec3-b4d1-a2a40ec43bfa",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "c873ac9a-5df2-3500-969e-d5c69e1f56e5",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "5f95dba9-783e-3316-bae7-c36ce13edb61",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "47f11152-16e6-3a24-ac1c-4078833e5f10",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "7036d776-1be7-3ffe-99d7-ebd65394820c",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "af9e15af-7f6b-3c1a-ba5c-8c69a411a6da",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "c7304ea9-4761-3873-9b2f-a3396b351db5",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "2aa7be6e-4673-3d11-99cc-3b78ae904217",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "9847cac9-9209-344f-834b-573d7d460cc8",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "1a32ecc2-3399-3c55-b290-bb7f7a4791e4",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "7b83e481-ea02-3fe6-8c68-8ca6be3d1207",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "a82cf95d-2f3c-36ed-b967-93af0be0c3ef",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "988ac66d-d811-3bae-ae71-ce816ae3e1b4",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "dd0179fd-9a91-3dd0-81a2-62a1f9f3c3e2",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "bc1064cf-3848-3b3c-8a57-803c4f590272",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "013fc25b-e6d4-30a5-8835-23c3d1ba97b0",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "8b66e53e-f4ad-35fc-ab3e-f78ce79c0c52",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bert/src/bert_layers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 17,
                  "endLine": 433,
                  "endColumn": 74,
                  "snippet": {
                    "text": "                return get_slopes_power_of_2(\n                    closest_power_of_2) + _get_alibi_head_slopes(\n                        2 * closest_power_of_2)[0::2][:n_heads -\n                                                      closest_power_of_2]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cccaf388ff86c350e019d7adf53879eb3c6a8d99a348653a8b47cc20082b4d727931c60dc9aa43eec2fc50895eadf55895d27541cf45e68655f09b9bb5302a84_2"
          },
          "properties": {}
        },
        {
          "ruleId": "e051ed7c-b820-3d13-93b7-e3e99ae3dc53",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bert/src/bert_layers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 17,
                  "endLine": 420,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                return [start * ratio**i for i in range(n_heads)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cccaf388ff86c350e019d7adf53879eb3c6a8d99a348653a8b47cc20082b4d727931c60dc9aa43eec2fc50895eadf55895d27541cf45e68655f09b9bb5302a84_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b40d7874-bdd5-38ff-a0cb-c808be37148d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bert/convert_c4.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 14,
                  "endLine": 89,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    loader = DataLoader(\n        dataset=dataset,\n        sampler=None,\n        batch_size=batch_size,\n        num_workers=num_workers,\n        prefetch_factor=prefetch_factor,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "30e10eaa2920907e6a0862bff95e8a6ce4b3f0347da9f76481bc9a35298de061b11ebed6a695cd5f7fedb0cf414e0954d2c2acd610984baf1a37b5e0b5b0f096_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7b22bb69-919f-3d87-b14f-88949ed5ea78",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bert/src/bert_layers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 427,
                  "startColumn": 17,
                  "endLine": 427,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                return get_slopes_power_of_2(n_heads)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cccaf388ff86c350e019d7adf53879eb3c6a8d99a348653a8b47cc20082b4d727931c60dc9aa43eec2fc50895eadf55895d27541cf45e68655f09b9bb5302a84_1"
          },
          "properties": {}
        },
        {
          "ruleId": "66dca197-1044-3ae0-9ac5-027cafb92b72",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bert/src/glue/finetuning_jobs.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 12,
                  "endLine": 36,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    return DataLoader(\n        dataset=dataset,\n        sampler=dist.get_sampler(dataset, drop_last=False, shuffle=False),\n        collate_fn=transformers.default_data_collator,\n        **kwargs,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b8380a8cd5020312676f9e956e04beed51610875a1d117ce81f33c435c1fc5170140df52f46904d9124f3ed16bb4f1f5eaf04507bcc9d5ae19c70aac58f83754_0"
          },
          "properties": {}
        },
        {
          "ruleId": "39c821e6-3812-3b56-aecb-2bf70551d74e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bert/src/bert_layers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 764,
                  "startColumn": 22,
                  "endLine": 764,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        state_dict = torch.load(pretrained_checkpoint)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fb12611315692dee15b03fa96238d2b882193b75714bfd5e294add12bb055829c2f818e62c6254009750f9091843d9a5bca629cbef4712c9ad078eafe8e9057e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3f6226db-45f8-303b-97d1-75d04a871fce",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bert/src/bert_layers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 933,
                  "startColumn": 22,
                  "endLine": 933,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        state_dict = torch.load(pretrained_checkpoint)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fb12611315692dee15b03fa96238d2b882193b75714bfd5e294add12bb055829c2f818e62c6254009750f9091843d9a5bca629cbef4712c9ad078eafe8e9057e_1"
          },
          "properties": {}
        },
        {
          "ruleId": "a26929a1-88d4-3a44-8b5e-3909790e1989",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cifar/data.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 9,
                  "endLine": 164,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        DataLoader(\n            dataset,\n            batch_size=batch_size,\n            sampler=sampler,\n            drop_last=drop_last,\n            collate_fn=pil_image_collate,\n            **dataloader_kwargs,\n        ),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ec5943ef22c36ce92d661c961999de1c59af42d60bae25cd44064032712462a8d1f219c94bd2c2d7b65621ddaf1cd280aa5fd1dd6b842f7f54aa06f58cafbab9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b7906f96-2d48-3ec3-b4d1-a2a40ec43bfa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `RandomResizePair` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/transforms.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 24,
                  "endLine": 102,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        resize_scale = np.random.random_sample() * ("
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "07814445d38e2953945c6669a54c67b242a950777e06b209cb125b93a0afbc9838d7e2b6c23822fdb97014317e907c4d6267ce7c2bc10ad5e334cac8a8969611_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c873ac9a-5df2-3500-969e-d5c69e1f56e5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/data.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 20,
                  "endLine": 108,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        dataloader=DataLoader(dataset=dataset,\n                              batch_size=batch_size,\n                              sampler=sampler,\n                              drop_last=drop_last,\n                              collate_fn=pil_image_collate,\n                              **dataloader_kwargs),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "38a871547eb973c9d8a4438d444782d40559971ac9326bbee86083f5a35316b64660937746433109cdf204a13a3a1b7f8ef9fb70cb41d2d6c42400bc3424107f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5f95dba9-783e-3316-bae7-c36ce13edb61",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `RandomHFlipPair` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/transforms.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 12,
                  "endLine": 192,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        if np.random.random_sample() > self.probability:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d158150a9dc41ca481b257564f65e8dabc7a615ded688d2761d70737cfd49246325680ca3fe6d3c283212e4ddcb01d4d18713e31af37e4bfdf9211b1f9aa4d41_0"
          },
          "properties": {}
        },
        {
          "ruleId": "47f11152-16e6-3a24-ac1c-4078833e5f10",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `PhotometricDistoration` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/transforms.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 12,
                  "endLine": 250,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        if np.random.randint(2):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e7ce855c1844da41066e3c67784dad302b8d2be66e85c5a6a5d9b8830ab5a8ade57510a987e0da0a41c3221d23e1979534e720c359174e7d3e5c2970bd594869_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7036d776-1be7-3ffe-99d7-ebd65394820c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `PhotometricDistoration` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/transforms.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 33,
                  "endLine": 252,
                  "endColumn": 71,
                  "snippet": {
                    "text": "            brightness_factor = np.random.uniform(1 - self.brightness,\n                                                  1 + self.brightness)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fe4daefd2a82567d7ceb418fbbd31aece15a8d72684326b9bbf86ec97116ef41e3d8ca39290288d9f09e5b1a041923817dd3116bfe3b898de3b5eea725a591ee_0"
          },
          "properties": {}
        },
        {
          "ruleId": "af9e15af-7f6b-3c1a-ba5c-8c69a411a6da",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `PhotometricDistoration` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/transforms.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 35,
                  "endLine": 258,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        if contrast_mode == 1 and np.random.randint(2):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e7ce855c1844da41066e3c67784dad302b8d2be66e85c5a6a5d9b8830ab5a8ade57510a987e0da0a41c3221d23e1979534e720c359174e7d3e5c2970bd594869_2"
          },
          "properties": {}
        },
        {
          "ruleId": "c7304ea9-4761-3873-9b2f-a3396b351db5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `PhotometricDistoration` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/transforms.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 25,
                  "endLine": 257,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        contrast_mode = np.random.randint(2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e7ce855c1844da41066e3c67784dad302b8d2be66e85c5a6a5d9b8830ab5a8ade57510a987e0da0a41c3221d23e1979534e720c359174e7d3e5c2970bd594869_1"
          },
          "properties": {}
        },
        {
          "ruleId": "2aa7be6e-4673-3d11-99cc-3b78ae904217",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `PhotometricDistoration` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/transforms.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 31,
                  "endLine": 260,
                  "endColumn": 67,
                  "snippet": {
                    "text": "            contrast_factor = np.random.uniform(1 - self.contrast,\n                                                1 + self.contrast)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fe4daefd2a82567d7ceb418fbbd31aece15a8d72684326b9bbf86ec97116ef41e3d8ca39290288d9f09e5b1a041923817dd3116bfe3b898de3b5eea725a591ee_1"
          },
          "properties": {}
        },
        {
          "ruleId": "9847cac9-9209-344f-834b-573d7d460cc8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `PhotometricDistoration` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/transforms.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 12,
                  "endLine": 265,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        if np.random.randint(2):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e7ce855c1844da41066e3c67784dad302b8d2be66e85c5a6a5d9b8830ab5a8ade57510a987e0da0a41c3221d23e1979534e720c359174e7d3e5c2970bd594869_3"
          },
          "properties": {}
        },
        {
          "ruleId": "1a32ecc2-3399-3c55-b290-bb7f7a4791e4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `PhotometricDistoration` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/transforms.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 33,
                  "endLine": 267,
                  "endColumn": 71,
                  "snippet": {
                    "text": "            saturation_factor = np.random.uniform(1 - self.saturation,\n                                                  1 + self.saturation)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fe4daefd2a82567d7ceb418fbbd31aece15a8d72684326b9bbf86ec97116ef41e3d8ca39290288d9f09e5b1a041923817dd3116bfe3b898de3b5eea725a591ee_2"
          },
          "properties": {}
        },
        {
          "ruleId": "7b83e481-ea02-3fe6-8c68-8ca6be3d1207",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `PhotometricDistoration` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/transforms.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 26,
                  "endLine": 273,
                  "endColumn": 64,
                  "snippet": {
                    "text": "            hue_factor = np.random.uniform(-self.hue, self.hue)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fe4daefd2a82567d7ceb418fbbd31aece15a8d72684326b9bbf86ec97116ef41e3d8ca39290288d9f09e5b1a041923817dd3116bfe3b898de3b5eea725a591ee_3"
          },
          "properties": {}
        },
        {
          "ruleId": "a82cf95d-2f3c-36ed-b967-93af0be0c3ef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `PhotometricDistoration` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/transforms.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 12,
                  "endLine": 272,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        if np.random.randint(2):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e7ce855c1844da41066e3c67784dad302b8d2be66e85c5a6a5d9b8830ab5a8ade57510a987e0da0a41c3221d23e1979534e720c359174e7d3e5c2970bd594869_4"
          },
          "properties": {}
        },
        {
          "ruleId": "988ac66d-d811-3bae-ae71-ce816ae3e1b4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `PhotometricDistoration` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/transforms.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 35,
                  "endLine": 278,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        if contrast_mode == 0 and np.random.randint(2):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e7ce855c1844da41066e3c67784dad302b8d2be66e85c5a6a5d9b8830ab5a8ade57510a987e0da0a41c3221d23e1979534e720c359174e7d3e5c2970bd594869_5"
          },
          "properties": {}
        },
        {
          "ruleId": "dd0179fd-9a91-3dd0-81a2-62a1f9f3c3e2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `PhotometricDistoration` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deeplab/transforms.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 31,
                  "endLine": 280,
                  "endColumn": 67,
                  "snippet": {
                    "text": "            contrast_factor = np.random.uniform(1 - self.contrast,\n                                                1 + self.contrast)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fe4daefd2a82567d7ceb418fbbd31aece15a8d72684326b9bbf86ec97116ef41e3d8ca39290288d9f09e5b1a041923817dd3116bfe3b898de3b5eea725a591ee_4"
          },
          "properties": {}
        },
        {
          "ruleId": "bc1064cf-3848-3b3c-8a57-803c4f590272",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "resnet/data.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 9,
                  "endLine": 157,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        DataLoader(\n            dataset=dataset,\n            batch_size=batch_size,\n            sampler=sampler,\n            drop_last=drop_last,\n            collate_fn=pil_image_collate,\n            **dataloader_kwargs,\n        ),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0022c97cc016282f541f2fc48e7998a43a2a104307156f6c416ff0622ada3032036aac6607a849e258ca1decf37ba34cb5834a3ab176aef5eaad74a85cef88ff_0"
          },
          "properties": {}
        },
        {
          "ruleId": "013fc25b-e6d4-30a5-8835-23c3d1ba97b0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "llm/convert_c4.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 14,
                  "endLine": 84,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    loader = DataLoader(\n        dataset=dataset,\n        sampler=None,\n        batch_size=batch_size,\n        num_workers=num_workers,\n        prefetch_factor=prefetch_factor,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "066ac3c44dab0e960bdbcce58888f49521e72de34a57316d16e8344715d4f8d0cce9ac917da3043ca6e2c3309191db72bd8c8d5382ee5f241bac46f23476f835_0"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}